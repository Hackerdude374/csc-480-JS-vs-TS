================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-10-20T11:56:36.227Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.gitignore
js-todo-app/backend/.repopackignore
js-todo-app/backend/Dockerfile
js-todo-app/backend/package.json
js-todo-app/backend/server.js
js-todo-app/frontend/.repopackignore
js-todo-app/frontend/package.json
js-todo-app/frontend/public/index.html
js-todo-app/frontend/src/App.js
js-todo-app/frontend/src/AutocompleteDemo.js
js-todo-app/frontend/src/Dockerfile
js-todo-app/frontend/src/FormValidation.js
js-todo-app/frontend/src/index.js
js-todo-app/frontend/src/TypeInferenceDemo.js
js-todo-app/README.md
js-todo-app/repopack-output.txt
ts-todo-app/backend/.repopackignore
ts-todo-app/backend/Dockerfile
ts-todo-app/backend/package.json
ts-todo-app/backend/server.ts
ts-todo-app/backend/tsconfig.json
ts-todo-app/frontend/.repopackignore
ts-todo-app/frontend/Dockerfile
ts-todo-app/frontend/package.json
ts-todo-app/frontend/public/index.html
ts-todo-app/frontend/src/App.tsx
ts-todo-app/frontend/src/AutocompleteDemo.tsx
ts-todo-app/frontend/src/FormValidation.tsx
ts-todo-app/frontend/src/index.tsx
ts-todo-app/frontend/src/TypeInferenceDemo.tsx
ts-todo-app/README.md

================================================================
Repository Files
================================================================

================
File: .gitignore
================
node_modules

================
File: js-todo-app/backend/.repopackignore
================
node_modules
package-lock.json

================
File: js-todo-app/backend/Dockerfile
================
FROM node:16

WORKDIR /app

COPY package.json .
RUN npm install

COPY . .

EXPOSE 3001

CMD ["npm", "start"]

================
File: js-todo-app/backend/package.json
================
{
    "name": "js-todo-backend",
    "version": "1.0.0",
    "main": "server.js",
    "scripts": {
      "start": "node server.js"
    },
    "dependencies": {
      "express": "^4.17.1"
    }
  }

================
File: js-todo-app/backend/server.js
================
const express = require('express');
const app = express();
const port = 3001;

app.use(express.json());

let tasks = [];

app.post('/tasks', (req, res) => {
  const { name } = req.body;
  const task = { id: tasks.length + 1, name, completed: false };
  tasks.push(task);
  res.status(201).json(task);
});

app.get('/tasks', (req, res) => {
  res.json(tasks);
});

app.put('/tasks/:id', (req, res) => {
  const taskId = parseInt(req.params.id);
  const task = tasks.find(t => t.id === taskId);
  if (!task) {
    return res.status(404).json({ error: 'Task not found' });
  }
  task.completed = true;
  res.json(task);
});

app.delete('/tasks/:id', (req, res) => {
  const taskId = parseInt(req.params.id);
  tasks = tasks.filter(t => t.id !== taskId);
  res.status(204).send();
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

================
File: js-todo-app/frontend/.repopackignore
================
node_modules
package-lock.json

================
File: js-todo-app/frontend/package.json
================
{
  "name": "js-todo-frontend",
  "version": "1.0.0",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: js-todo-app/frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>JS ToDo App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

================
File: js-todo-app/frontend/src/App.js
================
import React, { useState, useEffect } from "react";
import FormValidation from "./FormValidation";
import TypeInferenceDemo from "./TypeInferenceDemo";
import AutocompleteDemo from "./AutocompleteDemo";

const App = () => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  useEffect(() => {
    fetch("/tasks")
      .then((res) => res.json())
      .then((data) => setTasks(data));
  }, []);

  const addTask = () => {
    fetch("/tasks", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name: newTask }),
    })
      .then((res) => res.json())
      .then((task) => {
        setTasks([...tasks, task]);
        setNewTask("");
      });
  };

  const markAsComplete = (id) => {
    fetch(`/tasks/${id}`, { method: "PUT" })
      .then(() => {
        setTasks(
          tasks.map((task) =>
            task.id === id ? { ...task, completed: true } : task
          )
        );
      });
  };

  const deleteTask = (id) => {
    fetch(`/tasks/${id}`, { method: "DELETE" })
      .then(() => {
        setTasks(tasks.filter((task) => task.id !== id));
      });
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">To-Do List (JavaScript)</h1>
      
      <div className="mb-4">
        <input
          className="border p-2 mr-2"
          value={newTask}
          onChange={(e) => setNewTask(e.target.value)}
          placeholder="New Task"
        />
        <button 
          className="bg-blue-500 text-white p-2 rounded"
          onClick={addTask}
        >
          Add Task
        </button>
      </div>

      <ul className="mb-8">
        {tasks.map((task) => (
          <li key={task.id} className="mb-2">
            <span className={task.completed ? "line-through" : ""}>
              {task.name}
            </span>
            {!task.completed && (
              <button
                className="ml-2 bg-green-500 text-white p-1 rounded"
                onClick={() => markAsComplete(task.id)}
              >
                Complete
              </button>
            )}
            <button
              className="ml-2 bg-red-500 text-white p-1 rounded"
              onClick={() => deleteTask(task.id)}
            >
              Delete
            </button>
          </li>
        ))}
      </ul>

      <h2 className="text-2xl font-bold mb-4">Demonstrations</h2>
      <div className="space-y-4">
        <FormValidation />
        <TypeInferenceDemo />
        <AutocompleteDemo />
      </div>
    </div>
  );
};

export default App;

================
File: js-todo-app/frontend/src/AutocompleteDemo.js
================
import React, { useState } from 'react';

const AutocompleteDemo = () => {
  const [inputValue, setInputValue] = useState('');
  const tasks = ['Buy groceries', 'Clean house', 'Walk dog', 'Pay bills'];

  return (
    <div className="p-4 border rounded">
      <h3 className="text-lg font-bold mb-2">Autocomplete Demo (JS)</h3>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        placeholder="Type a task..."
        className="border p-2 w-full mb-2"
      />
      <ul className="bg-gray-100 p-2 rounded">
        {tasks
          .filter(task => task.toLowerCase().includes(inputValue.toLowerCase()))
          .map(task => (
            <li key={task} className="cursor-pointer hover:bg-gray-200 p-1">
              {task}
            </li>
          ))
        }
      </ul>
      <p className="mt-2">
        JavaScript provides basic autocompletion.
      </p>
    </div>
  );
};

export default AutocompleteDemo;

================
File: js-todo-app/frontend/src/Dockerfile
================
FROM node:16

WORKDIR /app

COPY package.json .
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]

================
File: js-todo-app/frontend/src/FormValidation.js
================
import React, { useState } from 'react';

const FormValidation = () => {
  const [formData, setFormData] = useState({ name: '', age: '' });
  const [errors, setErrors] = useState({});

  const handleSubmit = (e) => {
    e.preventDefault();
    const newErrors = {};
    if (formData.name.length < 2) newErrors.name = 'Name must be at least 2 characters';
    if (isNaN(formData.age) || formData.age < 0) newErrors.age = 'Age must be a positive number';
    setErrors(newErrors);
    if (Object.keys(newErrors).length === 0) {
      alert('Form submitted successfully!');
    }
  };

  return (
    <div className="p-4 border rounded">
      <h3 className="text-lg font-bold mb-2">JavaScript Form</h3>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Name"
          value={formData.name}
          onChange={(e) => setFormData({ ...formData, name: e.target.value })}
          className="border p-2 mb-2 w-full"
        />
        {errors.name && <p className="text-red-500">{errors.name}</p>}
        <input
          type="text"
          placeholder="Age"
          value={formData.age}
          onChange={(e) => setFormData({ ...formData, age: e.target.value })}
          className="border p-2 mb-2 w-full"
        />
        {errors.age && <p className="text-red-500">{errors.age}</p>}
        <button type="submit" className="bg-blue-500 text-white p-2 rounded">Submit</button>
      </form>
    </div>
  );
};

export default FormValidation;

================
File: js-todo-app/frontend/src/index.js
================
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);

================
File: js-todo-app/frontend/src/TypeInferenceDemo.js
================
import React from 'react';

const TypeInferenceDemo = () => {
  const jsArray = [1, 2, 3, 'four', true];

  return (
    <div className="p-4 border rounded">
      <h3 className="text-lg font-bold mb-2">Type Inference Demo (JS)</h3>
      <div>
        <h4 className="font-bold">JavaScript</h4>
        <pre className="bg-gray-100 p-2 rounded">
          {JSON.stringify(jsArray, null, 2)}
        </pre>
        <p>Type: Array (no specific type information)</p>
      </div>
    </div>
  );
};

export default TypeInferenceDemo;

================
File: js-todo-app/README.md
================
# Install backend dependencies
cd backend
npm install
cd ..

# Install frontend dependencies
cd frontend
npm install
cd ..

# Run the app using Docker Compose
docker-compose up --build

================
File: js-todo-app/repopack-output.txt
================
================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-10-20T11:46:47.109Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
backend/.repopackignore
backend/Dockerfile
backend/package.json
backend/server.js
frontend/.repopackignore
frontend/package.json
frontend/public/index.html
frontend/src/App.js
frontend/src/Dockerfile
frontend/src/index.js
README.md

================================================================
Repository Files
================================================================

================
File: backend/.repopackignore
================
node_modules
package-lock.json

================
File: backend/Dockerfile
================
FROM node:16

WORKDIR /app

COPY package.json .
RUN npm install

COPY . .

EXPOSE 3001

CMD ["npm", "start"]

================
File: backend/package.json
================
{
    "name": "js-todo-backend",
    "version": "1.0.0",
    "main": "server.js",
    "scripts": {
      "start": "node server.js"
    },
    "dependencies": {
      "express": "^4.17.1"
    }
  }

================
File: backend/server.js
================
const express = require('express');
const app = express();
const port = 3001;

app.use(express.json());

let tasks = [];

app.post('/tasks', (req, res) => {
  const { name } = req.body;
  const task = { id: tasks.length + 1, name, completed: false };
  tasks.push(task);
  res.status(201).json(task);
});

app.get('/tasks', (req, res) => {
  res.json(tasks);
});

app.put('/tasks/:id', (req, res) => {
  const taskId = parseInt(req.params.id);
  const task = tasks.find(t => t.id === taskId);
  if (!task) {
    return res.status(404).json({ error: 'Task not found' });
  }
  task.completed = true;
  res.json(task);
});

app.delete('/tasks/:id', (req, res) => {
  const taskId = parseInt(req.params.id);
  tasks = tasks.filter(t => t.id !== taskId);
  res.status(204).send();
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

================
File: frontend/.repopackignore
================
node_modules
package-lock.json

================
File: frontend/package.json
================
{
  "name": "js-todo-frontend",
  "version": "1.0.0",
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "react-scripts": "4.0.3"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}

================
File: frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>JS ToDo App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

================
File: frontend/src/App.js
================
import React, { useState, useEffect } from "react";

const App = () => {
  const [tasks, setTasks] = useState([]);
  const [newTask, setNewTask] = useState("");

  useEffect(() => {
    fetch("/tasks")
      .then((res) => res.json())
      .then((data) => setTasks(data));
  }, []);

  const addTask = () => {
    fetch("/tasks", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name: newTask }),
    })
      .then((res) => res.json())
      .then((task) => setTasks([...tasks, task]));
    setNewTask("");
  };

  const markAsComplete = (id) => {
    fetch(`/tasks/${id}`, { method: "PUT" }).then(() => {
      setTasks(
        tasks.map((task) =>
          task.id === id ? { ...task, completed: true } : task
        )
      );
    });
  };

  const deleteTask = (id) => {
    fetch(`/tasks/${id}`, { method: "DELETE" }).then(() => {
      setTasks(tasks.filter((task) => task.id !== id));
    });
  };

  return (
    <div>
      <h1>To-Do List</h1>
      <input
        value={newTask}
        onChange={(e) => setNewTask(e.target.value)}
        placeholder="New Task"
      />
      <button onClick={addTask}>Add Task</button>
      <ul>
        {tasks.map((task) => (
          <li key={task.id}>
            {task.name} {task.completed ? "(Completed)" : ""}
            <button onClick={() => markAsComplete(task.id)}>Mark Complete</button>
            <button onClick={() => deleteTask(task.id)}>Delete</button>
          </li>
        ))}
      </ul>
    </div>
  );
};

export default App;

================
File: frontend/src/Dockerfile
================
FROM node:16

WORKDIR /app

COPY package.json .
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]

================
File: frontend/src/index.js
================
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);

================
File: README.md
================
# Install backend dependencies
cd backend
npm install
cd ..

# Install frontend dependencies
cd frontend
npm install
cd ..

# Run the app using Docker Compose
docker-compose up --build

================
File: ts-todo-app/backend/.repopackignore
================
node_modules
package-lock.json

================
File: ts-todo-app/backend/Dockerfile
================
FROM node:16

WORKDIR /app

COPY package.json .
RUN npm install

COPY . .

RUN npm run build

EXPOSE 3001

CMD ["npm", "start"]

================
File: ts-todo-app/backend/package.json
================
{
    "name": "ts-todo-backend",
    "version": "1.0.0",
    "main": "server.ts",
    "scripts": {
      "start": "tsc && node dist/server.js",
      "build": "tsc"
    },
    "dependencies": {
      "express": "^4.17.1"
    },
    "devDependencies": {
      "@types/express": "^4.17.13",
      "@types/node": "^16.0.0",
      "typescript": "^4.5.4"
    }
  }

================
File: ts-todo-app/backend/server.ts
================
import express, { Request, Response } from "express";

const app = express();
const port = 3001;

app.use(express.json());

interface Task {
  id: number;
  name: string;
  completed: boolean;
}

let tasks: Task[] = [];

app.post("/tasks", (req: Request, res: Response) => {
  const { name } = req.body;
  const task: Task = { id: tasks.length + 1, name, completed: false };
  tasks.push(task);
  res.status(201).json(task);
});

app.get("/tasks", (req: Request, res: Response) => {
  res.json(tasks);
});

app.put("/tasks/:id", (req: Request, res: Response) => {
  const taskId = parseInt(req.params.id);
  const task = tasks.find((t) => t.id === taskId);
  if (!task) {
    return res.status(404).json({ error: "Task not found" });
  }
  task.completed = true;
  res.json(task);
});

app.delete("/tasks/:id", (req: Request, res: Response) => {
  const taskId = parseInt(req.params.id);
  tasks = tasks.filter((t) => t.id !== taskId);
  res.status(204).send();
});

app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});

================
File: ts-todo-app/backend/tsconfig.json
================
{
    "compilerOptions": {
      "outDir": "./dist",
      "module": "commonjs",
      "target": "ES6",
      "strict": true
    },
    "include": ["server.ts"],
    "exclude": ["node_modules"]
  }

================
File: ts-todo-app/frontend/.repopackignore
================
node_modules
package-lock.json

================
File: ts-todo-app/frontend/Dockerfile
================
FROM node:16

WORKDIR /app

COPY package.json .
RUN npm install

COPY . .

EXPOSE 3000

CMD ["npm", "start"]

================
File: ts-todo-app/frontend/package.json
================
{
    "name": "ts-todo-frontend",
    "version": "1.0.0",
    "scripts": {
      "start": "react-scripts start",
      "build": "react-scripts build",
      "test": "react-scripts test",
      "eject": "react-scripts eject"
    },
    "dependencies": {
      "react": "^17.0.2",
      "react-dom": "^17.0.2",
      "react-scripts": "4.0.3",
      "typescript": "^4.1.2"
    },
    "devDependencies": {
      "@types/react": "^17.0.2",
      "@types/react-dom": "^17.0.2"
    }
  }

================
File: ts-todo-app/frontend/public/index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>TS ToDo App</title>
  </head>
  <body>
    <div id="root"></div>
  </body>
</html>

================
File: ts-todo-app/frontend/src/App.tsx
================
import React, { useState, useEffect } from "react";
import FormValidation from "./FormValidation";
import TypeInferenceDemo from "./TypeInferenceDemo";
import AutocompleteDemo from "./AutocompleteDemo";

interface Task {
  id: number;
  name: string;
  completed: boolean;
}

const App: React.FC = () => {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [newTask, setNewTask] = useState<string>("");

  useEffect(() => {
    fetch("/tasks")
      .then((res) => res.json())
      .then((data: Task[]) => setTasks(data));
  }, []);

  const addTask = () => {
    fetch("/tasks", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ name: newTask }),
    })
      .then((res) => res.json())
      .then((task: Task) => {
        setTasks([...tasks, task]);
        setNewTask("");
      });
  };

  const markAsComplete = (id: number) => {
    fetch(`/tasks/${id}`, { method: "PUT" })
      .then(() => {
        setTasks(
          tasks.map((task) =>
            task.id === id ? { ...task, completed: true } : task
          )
        );
      });
  };

  const deleteTask = (id: number) => {
    fetch(`/tasks/${id}`, { method: "DELETE" })
      .then(() => {
        setTasks(tasks.filter((task) => task.id !== id));
      });
  };

  return (
    <div className="container mx-auto p-4">
      <h1 className="text-3xl font-bold mb-4">To-Do List (TypeScript)</h1>
      
      <div className="mb-4">
        <input
          className="border p-2 mr-2"
          value={newTask}
          onChange={(e: React.ChangeEvent<HTMLInputElement>) => setNewTask(e.target.value)}
          placeholder="New Task"
        />
        <button 
          className="bg-blue-500 text-white p-2 rounded"
          onClick={addTask}
        >
          Add Task
        </button>
      </div>

      <ul className="mb-8">
        {tasks.map((task) => (
          <li key={task.id} className="mb-2">
            <span className={task.completed ? "line-through" : ""}>
              {task.name}
            </span>
            {!task.completed && (
              <button
                className="ml-2 bg-green-500 text-white p-1 rounded"
                onClick={() => markAsComplete(task.id)}
              >
                Complete
              </button>
            )}
            <button
              className="ml-2 bg-red-500 text-white p-1 rounded"
              onClick={() => deleteTask(task.id)}
            >
              Delete
            </button>
          </li>
        ))}
      </ul>

      <h2 className="text-2xl font-bold mb-4">Demonstrations</h2>
      <div className="space-y-4">
        <FormValidation />
        <TypeInferenceDemo />
        <AutocompleteDemo />
      </div>
    </div>
  );
};

export default App;

================
File: ts-todo-app/frontend/src/AutocompleteDemo.tsx
================
import React, { useState } from 'react';

const AutocompleteDemo: React.FC = () => {
  const [inputValue, setInputValue] = useState('');
  const tasks: string[] = ['Buy groceries', 'Clean house', 'Walk dog', 'Pay bills'];

  return (
    <div className="p-4 border rounded">
      <h3 className="text-lg font-bold mb-2">Autocomplete Demo (TS)</h3>
      <input
        type="text"
        value={inputValue}
        onChange={(e) => setInputValue(e.target.value)}
        placeholder="Type a task..."
        className="border p-2 w-full mb-2"
      />
      <ul className="bg-gray-100 p-2 rounded">
        {tasks
          .filter(task => task.toLowerCase().includes(inputValue.toLowerCase()))
          .map(task => (
            <li key={task} className="cursor-pointer hover:bg-gray-200 p-1">
              {task}
            </li>
          ))
        }
      </ul>
      <p className="mt-2">
        TypeScript provides enhanced autocompletion and type checking.
      </p>
    </div>
  );
};

export default AutocompleteDemo;

================
File: ts-todo-app/frontend/src/FormValidation.tsx
================
import React, { useState } from 'react';

interface FormData {
  name: string;
  age: number;
}

const FormValidation: React.FC = () => {
  const [formData, setFormData] = useState<FormData>({ name: '', age: 0 });
  const [errors, setErrors] = useState<Partial<FormData>>({});

  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    const newErrors: Partial<FormData> = {};
    if (formData.name.length < 2) newErrors.name = 'Name must be at least 2 characters';
    if (isNaN(formData.age) || formData.age < 0) newErrors.age = 'Age must be a positive number';
    setErrors(newErrors);
    if (Object.keys(newErrors).length === 0) {
      alert('Form submitted successfully!');
    }
  };

  return (
    <div className="p-4 border rounded">
      <h3 className="text-lg font-bold mb-2">TypeScript Form</h3>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Name"
          value={formData.name}
          onChange={(e) => setFormData({ ...formData, name: e.target.value })}
          className="border p-2 mb-2 w-full"
        />
        {errors.name && <p className="text-red-500">{errors.name}</p>}
        <input
          type="number"
          placeholder="Age"
          value={formData.age}
          onChange={(e) => setFormData({ ...formData, age: Number(e.target.value) })}
          className="border p-2 mb-2 w-full"
        />
        {errors.age && <p className="text-red-500">{errors.age}</p>}
        <button type="submit" className="bg-blue-500 text-white p-2 rounded">Submit</button>
      </form>
    </div>
  );
};

export default FormValidation;

================
File: ts-todo-app/frontend/src/index.tsx
================
import React from "react";
import ReactDOM from "react-dom";
import "./index.css";
import App from "./App";

ReactDOM.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
  document.getElementById("root")
);

================
File: ts-todo-app/frontend/src/TypeInferenceDemo.tsx
================
import React from 'react';

const TypeInferenceDemo: React.FC = () => {
  const tsArray: (number | string | boolean)[] = [1, 2, 3, 'four', true];

  return (
    <div className="p-4 border rounded">
      <h3 className="text-lg font-bold mb-2">Type Inference Demo (TS)</h3>
      <div>
        <h4 className="font-bold">TypeScript</h4>
        <pre className="bg-gray-100 p-2 rounded">
          {JSON.stringify(tsArray, null, 2)}
        </pre>
        <p>Type: (number | string | boolean)[]</p>
      </div>
    </div>
  );
};

export default TypeInferenceDemo;

================
File: ts-todo-app/README.md
================
# Install backend dependencies
cd backend
npm install
cd ..

# Install frontend dependencies
cd frontend
npm install
cd ..

# Run the app using Docker Compose
docker-compose up --build
